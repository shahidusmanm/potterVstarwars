{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ECS7020P Mini-Project Basic Solution\n",
    "\n",
    "### 1 Author\n",
    "\n",
    "**Student Name**:  Muhammad Usman Shahid <br />\n",
    "**Student ID**:  210493078\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2 Problem formulation\n",
    "\n",
    "The problem for the basic solution is classifying an audio recording of hums and whistles as either being a recording of the Harry Potter theme song or from the StarWars movie franchise. The recordings were provided as part of the MLEnd Hums and Whistles Dataset - which contained samples of other songs as well.\n",
    "\n",
    "The first part of the problem was extracting samples of interest from the entire dataset (samples of hums and whistles corresponding to the Potter and Starwars classes).\n",
    "\n",
    "The second (and most difficult) part of the problem was figuring out the features that best represent our dataset. This was difficult because most spectral features are good at describing the type of audio/sound instead of capturing the nuances within the audio. Most spectral features (including pitch, spectograms and bandwidth) work better at distinguishing different voices instead of different rhythems or beats. Features that would work better for this problem would be more complex varitions of these spectral features that are able to quantify the variation of the spectrum over time. Due to the nature of the problem, these end up being time-series features which are better dealt with time-series analysis.\n",
    "\n",
    "The third part of the problem was building a robust model that was able to classify these features and provide repeatable results on new samples that it had not seen before. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3 Methodology\n",
    "\n",
    "The methodology followed is as explained;\n",
    "\n",
    "1. Data management and organization\n",
    "    * The data was provided as raw .wav audio files and consisted of audio segments of whistles and hums from 8 different songs. The problem defined for the basic solution was classifying audio recordings between Potter and Starwars which meant the other songs had to be removed. This was done manually through the Windows File Explorer where I copied all files with the words Potter and Starwars and pasted them in their own respective folders.\n",
    "    \n",
    "    All the raw audio files from each folder were then read into a glob and used for further processing.\n",
    "\n",
    "\n",
    "2. Visualization and analysis\n",
    "    * Initially the data potter and starwars dataset had recordings of both hums and whistles but during visualization, it was noticed that the whistle recordings made up about a total of a quarter of the recordings for each class and that the spectrum for the whistles was different from the hums. Due to this, it was decided to remove the whistles recordings in an attempt to have a more streamlined dataset.\n",
    "    \n",
    "    At this stage, the files were still raw-audio files. \n",
    "    \n",
    "\n",
    "3. Feature extraction\n",
    "\n",
    "    * The feature extraction stage involved identifying and extracting single-value features from the audio-spectrum that best captured the structure of the spectrum. The feature values were pushed into a dataframe and saved as a CSV file on disk so that they could be loaded for future processing. Running the feature processing functions everytime was very computationally expensive. More details in the section on Transformations.\n",
    "    \n",
    "    After the feature extraction stage, the new dataset was a dataframe of features and labels for each audio in our original Potter vs Starwars dataset\n",
    "    \n",
    "    \n",
    "4. Model training\n",
    "\n",
    "    * Once the feature matrix was built, the features and labels were used to train multiple models. Both SVMs and tree-based classifiers were used to check their performance on the data.\n",
    "    \n",
    "    \n",
    "5. Model evaluation and validation\n",
    "\n",
    "    * Accuracy was used as the metric of choice for this problem. The base models did not have a good result on both the training and validation set so some hyperparameter tuning was done using Grid Search. The best combination of hyperparameters were used to train the final model \n",
    "    \n",
    "    \n",
    "6. Model serialization and export (for advanced solution)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4 Machine Learning Pipeline\n",
    "\n",
    "Data download and extraction -> Data ingestion -> Sample visualization and exploration -> Feature extraction -> Model building, evaluation and validation -> Predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5 Dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import glob, librosa\n",
    "import IPython.display as ipd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "294"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_path = 'Data/Dataset/Harry/*.wav'\n",
    "harry_files = glob.glob(sample_path)\n",
    "len(harry_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "307"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_path = 'Data/Dataset/Starwars/*.wav'\n",
    "starwars_files = glob.glob(sample_path)\n",
    "len(starwars_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n=250\n",
    "\n",
    "fs = None # Sampling frequency. If None, fs would be 22050\n",
    "x, fs = librosa.load(harry_files[n],sr=fs)\n",
    "t = np.arange(len(x))/fs\n",
    "plt.plot(t,x)\n",
    "plt.xlabel('time (sec)')\n",
    "plt.ylabel('amplitude')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n=250\n",
    "fs = None # Sampling frequency. If None, fs would be 22050\n",
    "x, fs = librosa.load(starwars_files[n],sr=fs)\n",
    "t = np.arange(len(x))/fs\n",
    "plt.plot(t,x)\n",
    "plt.xlabel('time (sec)')\n",
    "plt.ylabel('amplitude')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Feature extraction and transformation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getPitch(x,fs,winLen=0.02):\n",
    "    #winLen = 0.02 \n",
    "    p = winLen*fs\n",
    "    frame_length = int(2**int(p-1).bit_length())\n",
    "    hop_length = frame_length//2\n",
    "    f0, voiced_flag, voiced_probs = librosa.pyin(y=x, fmin=80, fmax=450, sr=fs, frame_length=frame_length,hop_length=hop_length)\n",
    "    \n",
    "    tempogram = librosa.feature.tempogram (y=x, sr = fs)\n",
    "    return f0,voiced_flag, tempogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getXy(files,labels, scale_audio=False, onlySingleDigit=False):\n",
    "\n",
    "    X,y =[],[]\n",
    "    for file in tqdm(files):\n",
    "        fileID = file.split('/')[-1]\n",
    "        file_name = file.split('/')[-1]\n",
    "        #print(file_name)\n",
    "        #print(labels_file.loc[fileID]['interpretation'])\n",
    "        #print(labels_file.loc[fileID]['interpretation']=='hum')\n",
    "        #yi = list(labels_file.loc[fileID]['interpretation'])[0]=='hum'\n",
    "        #yi = labels_file.loc[fileID]['interpretation']=='hum'\n",
    "        yi = labels\n",
    "        fs = None # if None, fs would be 22050\n",
    "        x, fs = librosa.load(file,sr=fs)\n",
    "        if scale_audio: x = x/np.max(np.abs(x))\n",
    "        f0, voiced_flag, tempogram = getPitch(x,fs,winLen=0.02)\n",
    "\n",
    "        power = np.sum(x**2)/len(x)\n",
    "        pitch_mean = np.nanmean(f0) if np.mean(np.isnan(f0))<1 else 0\n",
    "        pitch_std  = np.nanstd(f0) if np.mean(np.isnan(f0))<1 else 0\n",
    "        voiced_fr = np.mean(voiced_flag)\n",
    "        tempogram = np.nanmean(tempogram) if np.mean(np.isnan(tempogram))<1 else 0\n",
    "\n",
    "        xi = [power,pitch_mean,pitch_std,voiced_fr, tempogram]\n",
    "        X.append(xi)\n",
    "        y.append(yi)\n",
    "    \n",
    "    return np.array(X),np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████████| 294/294 [24:43<00:00,  5.05s/it]\n"
     ]
    }
   ],
   "source": [
    "X_harry, y_harry = getXy(harry_files, labels = \"Harry\", scale_audio=True, onlySingleDigit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████████| 307/307 [29:35<00:00,  5.78s/it]\n"
     ]
    }
   ],
   "source": [
    "X_starwars, y_starwars = getXy(starwars_files, labels = \"Starwars\", scale_audio=True, onlySingleDigit=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.concatenate((X_harry, X_starwars), axis = 0)\n",
    "y = np.concatenate((y_harry, y_starwars), axis = 0)\n",
    "\n",
    "np.savetxt('features_X.npy', X)\n",
    "np.savetxt('features_y.npy', y, fmt=\"%s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating the features dataframe and saving it disk so that we dont have to to feature extraction everytime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_df = pd.DataFrame(data = X, columns = ['power','pitch_mean','pitch_sd','voiced_fr', 'tempogram'])\n",
    "features_df['label'] = y\n",
    "\n",
    "#features_df.to_csv(\"features.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_df = pd.read_csv('features.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>power</th>\n",
       "      <th>pitch_mean</th>\n",
       "      <th>pitch_sd</th>\n",
       "      <th>voiced_fr</th>\n",
       "      <th>tempogram</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.013121</td>\n",
       "      <td>182.376809</td>\n",
       "      <td>49.327953</td>\n",
       "      <td>0.752028</td>\n",
       "      <td>0.185247</td>\n",
       "      <td>Harry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.004869</td>\n",
       "      <td>176.197847</td>\n",
       "      <td>46.430793</td>\n",
       "      <td>0.746699</td>\n",
       "      <td>0.198326</td>\n",
       "      <td>Harry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.027797</td>\n",
       "      <td>289.233523</td>\n",
       "      <td>79.005025</td>\n",
       "      <td>0.771298</td>\n",
       "      <td>0.115758</td>\n",
       "      <td>Harry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.026202</td>\n",
       "      <td>297.719994</td>\n",
       "      <td>63.469592</td>\n",
       "      <td>0.872504</td>\n",
       "      <td>0.135890</td>\n",
       "      <td>Harry</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.072582</td>\n",
       "      <td>174.583770</td>\n",
       "      <td>34.897155</td>\n",
       "      <td>0.786550</td>\n",
       "      <td>0.209743</td>\n",
       "      <td>Harry</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      power  pitch_mean   pitch_sd  voiced_fr  tempogram  label\n",
       "0  0.013121  182.376809  49.327953   0.752028   0.185247  Harry\n",
       "1  0.004869  176.197847  46.430793   0.746699   0.198326  Harry\n",
       "2  0.027797  289.233523  79.005025   0.771298   0.115758  Harry\n",
       "3  0.026202  297.719994  63.469592   0.872504   0.135890  Harry\n",
       "4  0.072582  174.583770  34.897155   0.786550   0.209743  Harry"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='PC1', ylabel='PC2'>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components = 2)\n",
    "\n",
    "components = pca.fit_transform(features_df[['power','pitch_mean','pitch_sd','voiced_fr', 'tempogram']])\n",
    "components = pd.DataFrame(data = components, columns = ['PC1','PC2'])\n",
    "\n",
    "\n",
    "import seaborn as sns\n",
    "sns.scatterplot (data = components, x = 'PC1', y = 'PC2', hue = features_df['label'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. Modeling, evaluation and validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((420, 5), (181, 5), (420,), (181,))"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(features_df [['power','pitch_mean','pitch_sd','voiced_fr', 'tempogram']], features_df['label'], test_size=0.3)\n",
    "X_train.shape, X_val.shape, y_train.shape, y_val.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Building a SVM on default features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 0.5785714285714286\n",
      "Validation  Accuracy 0.5580110497237569\n",
      "The support vectors are (414, 5)\n"
     ]
    }
   ],
   "source": [
    "model  = svm.SVC(C=1)\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "yt_p = model.predict(X_train)\n",
    "yv_p = model.predict(X_val)\n",
    "\n",
    "print('Training Accuracy', np.mean(yt_p==y_train))\n",
    "print('Validation  Accuracy', np.mean(yv_p==y_val))\n",
    "print('The support vectors are', model.support_vectors_.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Building a SVM on notmalized input features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that normalizing the input features led to a sharp increase in both the training and validation accuracy. Lets see if tree-based models perform any better on this specific dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 0.919047619047619\n",
      "Validation  Accuracy 0.7292817679558011\n",
      "The support vectors are (382, 5)\n"
     ]
    }
   ],
   "source": [
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "model  = svm.SVC(C=1,gamma=2)\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "yt_p = model.predict(X_train)\n",
    "yv_p = model.predict(X_val)\n",
    "\n",
    "print('Training Accuracy', np.mean(yt_p==y_train))\n",
    "print('Validation  Accuracy', np.mean(yv_p==y_val))\n",
    "print('The support vectors are', model.support_vectors_.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Building a decision tree with default hyperparameters on the normalized dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 1.0\n",
      "Validation  Accuracy 0.6519337016574586\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "model  = DecisionTreeClassifier()\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "yt_p = model.predict(X_train)\n",
    "yv_p = model.predict(X_val)\n",
    "\n",
    "training_acc = np.mean(yt_p==y_train)\n",
    "validation_acc = np.mean(yv_p==y_val)\n",
    "\n",
    "print('Training Accuracy', training_acc)\n",
    "print('Validation  Accuracy', validation_acc)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Building a Random Forest with default hyperparameters on the normalized dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A decision tree does not perform any better than the SVM which is alright but the accuracy is still pretty low on the validation set. This is expected because the features we have extracted can be much better in terms of explaining the rhythm and beat but we also want to try getting as much improvement as we can from our current features.\n",
    "\n",
    "So we try some advanced ensemble techniques to see if they work better. Lets use the Random Forest ensemble classifier and see if it performs better than standalone decision trees. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 1.0\n",
      "Validation  Accuracy 0.6906077348066298\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "model  = RandomForestClassifier()\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "yt_p = model.predict(X_train)\n",
    "yv_p = model.predict(X_val)\n",
    "\n",
    "training_acc = np.mean(yt_p==y_train)\n",
    "validation_acc = np.mean(yv_p==y_val)\n",
    "\n",
    "print('Training Accuracy', training_acc)\n",
    "print('Validation  Accuracy', validation_acc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okay so the validation accuracy improved quite a bit with a Random Forest with default parameters. This is good because this shows that ensemble methods offer better performance than standalone machine learning models. \n",
    "\n",
    "This sounds really good but there are two things we need to consider;\n",
    "\n",
    "1. Can the model perform better if we do some hyperparameter tuning to get a better fit?\n",
    "2. Is our validation accuracy reliable? Is it possible that we've stumbled on to a validation sample that performs well by accident? Can we do cross validation to see if our model actually works better on different variations of the testing set instead of just on one single validation dataset?\n",
    "\n",
    "We can do some hyperparamter tuning to figure out if there are any combinations of hyperparameters that work better for us. But before we do that we need to get an idea of what ranges of parameters should be tested. We can see the optimum ranges of hyperparamters that we should be using."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='max_depth'>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "training_acc = []\n",
    "validation_acc = []\n",
    "max_depth = []\n",
    "\n",
    "for x in range (25):\n",
    "    model  = RandomForestClassifier(max_depth=x+1)\n",
    "    model.fit(X_train,y_train)\n",
    "\n",
    "    yt_p = model.predict(X_train)\n",
    "    yv_p = model.predict(X_val)\n",
    "\n",
    "    training_acc.append(np.mean(yt_p==y_train))\n",
    "    validation_acc.append(np.mean(yv_p==y_val))\n",
    "    max_depth.append(x)\n",
    "\n",
    "    \n",
    "results = pd.DataFrame ()\n",
    "results[\"max_depth\"] = max_depth\n",
    "results[\"training_acc\"] = training_acc\n",
    "results[\"validation_acc\"] = validation_acc\n",
    "\n",
    "import seaborn as sns\n",
    "sns.lineplot(data=results.set_index ('max_depth'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='n_estimators'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "training_acc = []\n",
    "validation_acc = []\n",
    "n_estimators = []\n",
    "\n",
    "for x in range (50):\n",
    "    model  = RandomForestClassifier(n_estimators=x+1)\n",
    "    model.fit(X_train,y_train)\n",
    "\n",
    "    yt_p = model.predict(X_train)\n",
    "    yv_p = model.predict(X_val)\n",
    "\n",
    "    training_acc.append(np.mean(yt_p==y_train))\n",
    "    validation_acc.append(np.mean(yv_p==y_val))\n",
    "    n_estimators.append(x)\n",
    "\n",
    "    \n",
    "results = pd.DataFrame ()\n",
    "results[\"n_estimators\"] = n_estimators\n",
    "results[\"training_acc\"] = training_acc\n",
    "results[\"validation_acc\"] = validation_acc\n",
    "\n",
    "import seaborn as sns\n",
    "sns.lineplot(data=results.set_index ('n_estimators'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get the best results when `max_depth` is 2, 6, 8 and 18 and when `n_estimators` is between 16 and 25. We can use grid search to see which combinations of these parameters work best."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=RandomForestClassifier(),\n",
       "             param_grid={'max_depth': [2, 6, 8, 18],\n",
       "                         'n_estimators': [16, 17, 18, 19]})"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "parameters = {'n_estimators':[16, 17, 18, 19], 'max_depth':[2, 6, 8, 18]}\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "GS_clf = GridSearchCV(rf, parameters)\n",
    "GS_clf.fit(X_train,y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_max_depth</th>\n",
       "      <th>param_n_estimators</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.030232</td>\n",
       "      <td>0.005458</td>\n",
       "      <td>0.004203</td>\n",
       "      <td>0.001469</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>{'max_depth': 2, 'n_estimators': 16}</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.607143</td>\n",
       "      <td>0.726190</td>\n",
       "      <td>0.607143</td>\n",
       "      <td>0.659524</td>\n",
       "      <td>0.046168</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.023996</td>\n",
       "      <td>0.001787</td>\n",
       "      <td>0.003400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>{'max_depth': 2, 'n_estimators': 17}</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.619048</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.607143</td>\n",
       "      <td>0.661905</td>\n",
       "      <td>0.041650</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.025601</td>\n",
       "      <td>0.001345</td>\n",
       "      <td>0.003399</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>{'max_depth': 2, 'n_estimators': 18}</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.039123</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.028604</td>\n",
       "      <td>0.004269</td>\n",
       "      <td>0.003400</td>\n",
       "      <td>0.000801</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>{'max_depth': 2, 'n_estimators': 19}</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.595238</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.669048</td>\n",
       "      <td>0.042191</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.024800</td>\n",
       "      <td>0.001170</td>\n",
       "      <td>0.003396</td>\n",
       "      <td>0.000494</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>{'max_depth': 6, 'n_estimators': 16}</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.673810</td>\n",
       "      <td>0.016148</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.034410</td>\n",
       "      <td>0.011033</td>\n",
       "      <td>0.004733</td>\n",
       "      <td>0.000906</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>{'max_depth': 6, 'n_estimators': 17}</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.630952</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.650000</td>\n",
       "      <td>0.040266</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.033135</td>\n",
       "      <td>0.009374</td>\n",
       "      <td>0.003803</td>\n",
       "      <td>0.000742</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>{'max_depth': 6, 'n_estimators': 18}</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.692857</td>\n",
       "      <td>0.013883</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.030196</td>\n",
       "      <td>0.003870</td>\n",
       "      <td>0.004201</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>6</td>\n",
       "      <td>19</td>\n",
       "      <td>{'max_depth': 6, 'n_estimators': 19}</td>\n",
       "      <td>0.738095</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.026082</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.025200</td>\n",
       "      <td>0.001720</td>\n",
       "      <td>0.003000</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>8</td>\n",
       "      <td>16</td>\n",
       "      <td>{'max_depth': 8, 'n_estimators': 16}</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.630952</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.726190</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.673810</td>\n",
       "      <td>0.030676</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.026000</td>\n",
       "      <td>0.001096</td>\n",
       "      <td>0.003599</td>\n",
       "      <td>0.000799</td>\n",
       "      <td>8</td>\n",
       "      <td>17</td>\n",
       "      <td>{'max_depth': 8, 'n_estimators': 17}</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.630952</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.630952</td>\n",
       "      <td>0.661905</td>\n",
       "      <td>0.031587</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.032800</td>\n",
       "      <td>0.003599</td>\n",
       "      <td>0.003800</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>{'max_depth': 8, 'n_estimators': 18}</td>\n",
       "      <td>0.619048</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.726190</td>\n",
       "      <td>0.619048</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.039123</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.030801</td>\n",
       "      <td>0.002639</td>\n",
       "      <td>0.004200</td>\n",
       "      <td>0.000978</td>\n",
       "      <td>8</td>\n",
       "      <td>19</td>\n",
       "      <td>{'max_depth': 8, 'n_estimators': 19}</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.619048</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.035315</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.033236</td>\n",
       "      <td>0.005200</td>\n",
       "      <td>0.004799</td>\n",
       "      <td>0.000748</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "      <td>{'max_depth': 18, 'n_estimators': 16}</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.726190</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.688095</td>\n",
       "      <td>0.025422</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.034800</td>\n",
       "      <td>0.001326</td>\n",
       "      <td>0.005200</td>\n",
       "      <td>0.000748</td>\n",
       "      <td>18</td>\n",
       "      <td>17</td>\n",
       "      <td>{'max_depth': 18, 'n_estimators': 17}</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.678571</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.683333</td>\n",
       "      <td>0.034993</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.033801</td>\n",
       "      <td>0.004119</td>\n",
       "      <td>0.003999</td>\n",
       "      <td>0.000632</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>{'max_depth': 18, 'n_estimators': 18}</td>\n",
       "      <td>0.654762</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>0.738095</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.676190</td>\n",
       "      <td>0.037946</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.035800</td>\n",
       "      <td>0.004620</td>\n",
       "      <td>0.004600</td>\n",
       "      <td>0.000800</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>{'max_depth': 18, 'n_estimators': 19}</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>0.702381</td>\n",
       "      <td>0.738095</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>0.688095</td>\n",
       "      <td>0.032297</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0        0.030232      0.005458         0.004203        0.001469   \n",
       "1        0.023996      0.001787         0.003400        0.000490   \n",
       "2        0.025601      0.001345         0.003399        0.000490   \n",
       "3        0.028604      0.004269         0.003400        0.000801   \n",
       "4        0.024800      0.001170         0.003396        0.000494   \n",
       "5        0.034410      0.011033         0.004733        0.000906   \n",
       "6        0.033135      0.009374         0.003803        0.000742   \n",
       "7        0.030196      0.003870         0.004201        0.000401   \n",
       "8        0.025200      0.001720         0.003000        0.000001   \n",
       "9        0.026000      0.001096         0.003599        0.000799   \n",
       "10       0.032800      0.003599         0.003800        0.000400   \n",
       "11       0.030801      0.002639         0.004200        0.000978   \n",
       "12       0.033236      0.005200         0.004799        0.000748   \n",
       "13       0.034800      0.001326         0.005200        0.000748   \n",
       "14       0.033801      0.004119         0.003999        0.000632   \n",
       "15       0.035800      0.004620         0.004600        0.000800   \n",
       "\n",
       "   param_max_depth param_n_estimators                                 params  \\\n",
       "0                2                 16   {'max_depth': 2, 'n_estimators': 16}   \n",
       "1                2                 17   {'max_depth': 2, 'n_estimators': 17}   \n",
       "2                2                 18   {'max_depth': 2, 'n_estimators': 18}   \n",
       "3                2                 19   {'max_depth': 2, 'n_estimators': 19}   \n",
       "4                6                 16   {'max_depth': 6, 'n_estimators': 16}   \n",
       "5                6                 17   {'max_depth': 6, 'n_estimators': 17}   \n",
       "6                6                 18   {'max_depth': 6, 'n_estimators': 18}   \n",
       "7                6                 19   {'max_depth': 6, 'n_estimators': 19}   \n",
       "8                8                 16   {'max_depth': 8, 'n_estimators': 16}   \n",
       "9                8                 17   {'max_depth': 8, 'n_estimators': 17}   \n",
       "10               8                 18   {'max_depth': 8, 'n_estimators': 18}   \n",
       "11               8                 19   {'max_depth': 8, 'n_estimators': 19}   \n",
       "12              18                 16  {'max_depth': 18, 'n_estimators': 16}   \n",
       "13              18                 17  {'max_depth': 18, 'n_estimators': 17}   \n",
       "14              18                 18  {'max_depth': 18, 'n_estimators': 18}   \n",
       "15              18                 19  {'max_depth': 18, 'n_estimators': 19}   \n",
       "\n",
       "    split0_test_score  split1_test_score  split2_test_score  \\\n",
       "0            0.678571           0.678571           0.607143   \n",
       "1            0.678571           0.690476           0.619048   \n",
       "2            0.666667           0.702381           0.654762   \n",
       "3            0.654762           0.702381           0.595238   \n",
       "4            0.678571           0.666667           0.666667   \n",
       "5            0.690476           0.583333           0.690476   \n",
       "6            0.714286           0.690476           0.678571   \n",
       "7            0.738095           0.678571           0.666667   \n",
       "8            0.666667           0.630952           0.678571   \n",
       "9            0.654762           0.678571           0.630952   \n",
       "10           0.619048           0.654762           0.654762   \n",
       "11           0.678571           0.619048           0.714286   \n",
       "12           0.654762           0.702381           0.726190   \n",
       "13           0.678571           0.654762           0.654762   \n",
       "14           0.654762           0.642857           0.642857   \n",
       "15           0.666667           0.642857           0.702381   \n",
       "\n",
       "    split3_test_score  split4_test_score  mean_test_score  std_test_score  \\\n",
       "0            0.726190           0.607143         0.659524        0.046168   \n",
       "1            0.714286           0.607143         0.661905        0.041650   \n",
       "2            0.761905           0.666667         0.690476        0.039123   \n",
       "3            0.714286           0.678571         0.669048        0.042191   \n",
       "4            0.702381           0.654762         0.673810        0.016148   \n",
       "5            0.630952           0.654762         0.650000        0.040266   \n",
       "6            0.702381           0.678571         0.692857        0.013883   \n",
       "7            0.714286           0.714286         0.702381        0.026082   \n",
       "8            0.726190           0.666667         0.673810        0.030676   \n",
       "9            0.714286           0.630952         0.661905        0.031587   \n",
       "10           0.726190           0.619048         0.654762        0.039123   \n",
       "11           0.714286           0.666667         0.678571        0.035315   \n",
       "12           0.690476           0.666667         0.688095        0.025422   \n",
       "13           0.678571           0.750000         0.683333        0.034993   \n",
       "14           0.738095           0.702381         0.676190        0.037946   \n",
       "15           0.738095           0.690476         0.688095        0.032297   \n",
       "\n",
       "    rank_test_score  \n",
       "0                14  \n",
       "1                12  \n",
       "2                 3  \n",
       "3                11  \n",
       "4                 9  \n",
       "5                16  \n",
       "6                 2  \n",
       "7                 1  \n",
       "8                10  \n",
       "9                12  \n",
       "10               15  \n",
       "11                7  \n",
       "12                4  \n",
       "13                6  \n",
       "14                8  \n",
       "15                4  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_results = pd.DataFrame(GS_clf.cv_results_)\n",
    "cv_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "depth = GS_clf.best_params_['max_depth']\n",
    "trees = GS_clf.best_params_['n_estimators']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 0.9\n",
      "Validation  Accuracy 0.6795580110497238\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "model  = RandomForestClassifier(max_depth = depth, n_estimators = trees)\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "yt_p = model.predict(X_train)\n",
    "yv_p = model.predict(X_val)\n",
    "\n",
    "training_acc = np.mean(yt_p==y_train)\n",
    "validation_acc = np.mean(yv_p==y_val)\n",
    "\n",
    "print('Training Accuracy', training_acc)\n",
    "print('Validation  Accuracy', validation_acc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Final SVM model for deployment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy 0.919047619047619\n",
      "Validation  Accuracy 0.7292817679558011\n",
      "The support vectors are (382, 5)\n"
     ]
    }
   ],
   "source": [
    "mean = X_train.mean(0)\n",
    "sd =  X_train.std(0)\n",
    "\n",
    "X_train = (X_train-mean)/sd\n",
    "X_val  = (X_val-mean)/sd\n",
    "\n",
    "model  = svm.SVC(C=1,gamma=2)\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "yt_p = model.predict(X_train)\n",
    "yv_p = model.predict(X_val)\n",
    "\n",
    "print('Training Accuracy', np.mean(yt_p==y_train))\n",
    "print('Validation  Accuracy', np.mean(yv_p==y_val))\n",
    "print('The support vectors are', model.support_vectors_.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Model serialization and export for Deployment (Advanced Solution) \n",
    "\n",
    "In this notebook, we built a machine learning model to classify a hummed tune to be either from the Harry Potter theme song or from the Starwars movie. \n",
    "\n",
    "In the advanced solution, we will be deploying the model (that was serialized and exported as an ONNX file) to a docker container on the cloud and creating a web service that will take in a dictionary of features as an input, run them through the model and return its prediction as a response to the API call. \n",
    "\n",
    "We will talk about the ONNX Project in a lot more detail in the advanced solution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "import skl2onnx\n",
    "import onnx\n",
    "import onnxruntime as rt\n",
    "from skl2onnx.common.data_types import FloatTensorType\n",
    "from skl2onnx import convert_sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "initial_type = [('float_input', FloatTensorType([None, X_train.shape[1]]))]\n",
    "onx = convert_sklearn(model, initial_types=initial_type,\n",
    "                      target_opset=12)\n",
    "\n",
    "with open(\"ECS7020P_MLEND_PotterVsStarwars.onnx\", \"wb\") as f:\n",
    "    f.write(onx.SerializeToString())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9 Analysis and Conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This was a very interesting project. \n",
    "\n",
    "I never expected really good accuracy primarily because I'm not satisfied with the kind of features I have. As mentioned before, these spectral features would probably do a very good job in classification of different voices (for example) because they define quantities like loudness (the power of the spectrum), the pitch (avg. frequencies in the spectrum) etc. For our specific problem, we needed to have features that defined how the spectrum changed at a higher level. \n",
    "\n",
    "This is evident from the feature plot we did after PCA. There is a lack of clear separation between the feature points.\n",
    "\n",
    "A good feature would compare or contain information from novelty functions about local changes in the spectrum and represent them at a higher level. Another idea would have been to use time-series analysis to get features from the spectrum. \n",
    "\n",
    "But since this was a machine learning project instead of a signal processing project, I focused more on playing around with models and hyperparameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I tried out 2 different types of models; Support Vector Machines and Tree based Models. After normalizing the features, the SVM classifier outperformed both the decision tree and the ensemble-based Random Forest. This was surprising because ensemble methods usually do out perform standalone classifiers.\n",
    "\n",
    "On further analysis, and looking at the feature scatter plot, the results do make sense. Tree-based models are only able to make vertical or horizontal decision boundaries, which in this case was not effective as there is a lack of a clear vertical/horizontal separation between the classes.\n",
    "\n",
    "The SVM performed better due to its ability to make diagnol/angled decision boundaries which gave a relatively better separation than the tree-based models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
